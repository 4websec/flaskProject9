/app.py
 ## app.py ##
import os
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_migrate import Migrate
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv
from .extensions import db

# Load environment variables from .env file
load_dotenv()

# Initialize database and other extensions
migrate = Migrate()
login_manager = LoginManager()


def create_app():
    app = Flask(__name__)

    # Import Config class from config module
    from .config import Config
    app.config.from_object(Config)

    # Initialize extensions with the app instance
    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)

    # Import models
    from .models import User  # Assuming User model is defined in models.py

    # Import routes from routes module
    from .routes import main
    app.register_blueprint(main)  # Register the blueprint

    # Initialize and configure scheduler
    scheduler = BackgroundScheduler()
    with app.app_context():
        from .tasks import daily_check
        scheduler.add_job(daily_check, 'cron', hour=6, minute=15)
        scheduler.start()

    return app


/config.py
 ## config.py ##
# config.py

import os


class Config(object):
    basedir = os.path.abspath(os.path.dirname(__file__))
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'a-very-secret-key'
    # SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///dailycomply.db'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'dailycomply.db')
    # Other configuration settings
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    TWILIO_ACCOUNT_SID = os.environ.get("TWILIO_ACCOUNT_SID")
    TWILIO_AUTH_TOKEN = os.environ.get("TWILIO_AUTH_TOKEN")
    EXTERNAL_API_URL = os.environ.get("EXTERNAL_API_URL")


/dailycomply.db
 ## dailycomply.db ##
